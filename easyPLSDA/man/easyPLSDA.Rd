% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/easyPLSDA.R
\name{easyPLSDA}
\alias{easyPLSDA}
\title{easy Partial Least Square Discriminant Analysis class constructor function}
\usage{
easyPLSDA(formula,data=NULL,ncomp=2,method="classic",auto.select.var=FALSE,threshold=0.8,threshold.comp=0.95,maxi.comp=10,tol=10^-9,scale=TRUE)
}
\arguments{
\item{formula}{an object of class "formula" (or one that can be coerced to that class): a symbolic description of the model to be fitted. Similar to lm function.}

\item{data}{the dataset corresponding to given formula, must be coerced to a data.frame.}

\item{ncomp}{denoting the number of principal components to be used in the regression.
If NULL, the function choose the optimal number of components. Default: 2.}

\item{method}{The method that will be used to compute the different matrices used in regression.
Default "classic" is for PLS2 algorithm, "SIMPLS" is the other method based on matrix SVD.}

\item{tol}{The convergence threshold for latent scores computation, only for "classic" method. Default: 10^-9.}

\item{scale}{If TRUE (the default) after being column centered, X and Y can be further normalised with the standard deviation of each column.}
}
\description{
easyPLSDA class constructor is used to generate a class object to perform PLS-2 Discriminant analysis on subject data sets.
The returned object contains method to predict response matrix on unseen data : predict and  a summary() method.
}
\details{
The 'pls2' method function of the class extracts the numerical and geometric features from the independet variable matrix X and its linearly dependent response matrix Y.
Features of interest include the latent scores "T.scores" and "U.scores" from X and Y respectively, their respective loadings vectors "P.loadings" and "Q.loadings", along with two sets of column vectors,
named "X.weights" and "Y.weights" that are needed to linearly combine the columns of X and Y into their respective latent scores. The itterative method is set as default. Both methods return the features in a list.

The 'predict' method function of the class predicts the response matrix from an unseen set of data
}
